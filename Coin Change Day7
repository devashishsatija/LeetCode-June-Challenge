//Classic Problem Of Dynamic Programming
//You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.

class Solution {
    public int change(int amount, int[] coins) {
        //Using Dynamic Proggramming
        if(coins.length == 0 && amount  == 0)
            return 1 ;
        else if(coins.length == 0 && amount !=0)
            return 0;
        int dp[][] =new int[coins.length+1][amount+1];
        
        //initializing 1st row
        for(int i =0;i<dp[0].length;i++)
        {
            dp[0][i] = 0;
        }
        //initializing 1sr column
        for(int i =1;i<dp.length;i++)
            dp[i][0] = 1;
        //now using dp algorithm
        
        for(int i=1;i<dp.length;i++)
        {
            for(int j=1;j<dp[0].length;j++)
            {
                if(j < coins[i-1])
                    dp[i][j] = dp[i-1][j];
                else
                    dp[i][j] = dp[i-1][j] + dp[i][j-coins[i-1]];
            }
        }
        //return last element
        return dp[dp.length-1][dp[0].length -1];
        
    }
}
